#include <stdio.h>
#include <algorithm>
#include <time.h>
#include <queue>
typedef unsigned long long u64;
typedef __uint128_t u128;
const int N = 11;
const int BYTEWIDTH = 5;
const u64 MEMLEN = 1 << 25;
constexpr u64 pow10(int k) {
	return k?10*pow10(k-1):1;
}
template<int k=N>
u64 reverse(u64 x, u64 t = 0) {
	return reverse<k-1>(x/10, t*10+x%10);
}
template<>
u64 reverse<0>(u64 x, u64 t) {
	return t;
}
struct Mem {
	u64 x;
	u128 m;
	void operator=(u64 t) {
		x = t;
		u64 u = reverse(t);
		m = (u128)t * u;
		// fprintf(stderr, "%llu*%llu=%.6f\n", t, u, (double)m);
	}
	bool try_apply(u64 t) {
		u64 u = reverse(t);
		if (u>t) return false;
		x = t;
		m = (u128)t * u;
		return true;
	}
	void write(FILE* fp) {
		fwrite(&x, BYTEWIDTH, 1, fp);
	}
	bool read(FILE* fp) {
		u64 t = 0;
		if (fread(&t, BYTEWIDTH, 1, fp)) {
			*this = t;
			return true;
		} else {
			return false;
		}
	}
	bool operator<(const Mem& o) const {
		return m < o.m;
	}
	bool operator>(const Mem& o) const {
		return m > o.m;
	}
} Storage[MEMLEN], *StorPtr = Storage;

int main() {
	struct CF: Mem {
		FILE* fp;
		CF(FILE* fp): fp(fp) {
			read(fp);
		}
		CF(): fp(0) {
			x = m = 0;
		}
	};
	std::priority_queue<CF, std::vector<CF>, std::greater<CF> > Qu;
	for (int i=0; i<302; ++i) { // As many as files generated by generate.cpp
		char str[64];
		sprintf(str, "Segment %d.bin", i);
		FILE* fp = fopen(str, "rb");
		setvbuf(fp, 0, _IOFBF, 655360);
		Qu.emplace(fp);
	}
	CF Last; unsigned y = 0;
	while (!Qu.empty()) {
		CF t = Qu.top();
		(y+=1024) || fprintf (stderr, "%.6e %llu %ld\r", (double)t.m, t.x, clock());
		//fprintf (stderr, "%.6e %ld %d %016llX %016llX %lld\n", (double)t.m, clock(), fileno(t.fp), (u64)t.m, 1[(u64*)&t.m], t.x); if(y++==10) return 0;
		if (t.m == Last.m) {
			printf ("%llu %llu\n", Last.x, t.x);
		} //else printf ("%lu\n", t.x);
		Last = t;
		Qu.pop();
		if(t.read(t.fp)) {
			Qu.push(t);
		}
	}
}
